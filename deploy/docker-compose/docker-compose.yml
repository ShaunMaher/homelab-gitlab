services:
  omnibus:
    # image: ubuntu:latest
    # entrypoint: [ "bash", "-c", "sleep 86400" ]
    image: 'gitlab/gitlab-ce:latest'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
    container_name: 'omnibus'
    hostname: 'omnibus'
    networks:
      default:
        aliases:
          - git.ghanima.net
    environment:
      TZ: Australia/Melbourne

      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://git.ghanima.net'
        gitlab_rails['gitlab_shell_ssh_port'] = 2224
        registry_external_url 'https://cr.ghanima.net'
        registry['registry_http_addr'] = "localhost:5000"
        registry_nginx['redirect_http_to_https'] = true
        registry_nginx['listen_port'] = 5678

        # Pages are presented to the world via Cloudflared so Nginx does not
        #  need to be involved.
        pages_external_url "http://ghanima.net"
        gitlab_pages['external_http'] = [ '0.0.0.0:8063' ]
        pages_nginx['enable'] = false
        pages_nginx['listen_port'] = 81
        pages_nginx['listen_https'] = false
        pages_nginx['redirect_http_to_https'] = false

        # The local certificates should be rarely used because Cloudflare are
        #  providing the public facing TLS certificates but some "internal"
        #  connections (e.g. runner registrations) may fail if valid
        #  certificates are not used.
        letsencrypt['enable'] = true
        letsencrypt['auto_renew'] = true

        # Reduce writes to persistant storage by redirecting some data to /tmp
        prometheus['home'] = "/tmp/prometheus"

        # This is an external volume specifically for backups shared between
        #  containers
        gitlab_rails['backup_path'] = "/var/backups/gitlab/"

        # Consolidated object storage configuration
        gitlab_rails['object_store']['enabled'] = true
        gitlab_rails['object_store']['proxy_download'] = true
        gitlab_rails['object_store']['connection'] = {
          'provider' => 'AWS',
          'region' => '$S3_REGION',
          'aws_access_key_id' => '$S3_ACCESS_KEY',
          'aws_secret_access_key' => '$S3_SECRET_KEY',
          'endpoint' => '$S3_ENDPOINT',
          'path_style' => true
        }

        # We are using S3 storage for Gitlab Pages only.  Backup storage is
        #  configured elsewhere.
        gitlab_rails['object_store']['objects']['artifacts']['enabled'] = false
        gitlab_rails['object_store']['objects']['external_diffs']['enabled'] = false
        gitlab_rails['object_store']['objects']['lfs']['enabled'] = false
        gitlab_rails['object_store']['objects']['uploads']['enabled'] = false
        gitlab_rails['object_store']['objects']['packages']['enabled'] = false
        gitlab_rails['object_store']['objects']['dependency_proxy']['enabled'] = false
        gitlab_rails['object_store']['objects']['terraform_state']['enabled'] = false
        gitlab_rails['object_store']['objects']['ci_secure_files']['enabled'] = false
        gitlab_rails['object_store']['objects']['pages']['bucket'] = '$S3_PAGES_BUCKET'
    ports:
      - '80:80'
      - '443:443'
      - '2422:22'
      - '5000:5000'
    volumes:
      - 'gitlab_config:/etc/gitlab'
      - 'gitlab_logs:/var/log/gitlab'
      - 'gitlab_data:/var/opt/gitlab'
      - type: tmpfs
        target: /tmp
        tmpfs:
          mode: 01777
      - type: bind
        source: /mnt/BulkData/gitlab-backups
        target: /var/backups/gitlab
      - type: bind
        source: /mnt/BulkData/gitlab-packages
        target: /var/opt/gitlab/gitlab-rails/shared/packages
      - type: bind
        source: /mnt/BulkData/gitlab-registry
        target: /var/opt/gitlab/gitlab-rails/shared/registry
      - type: bind
        source: /mnt/BulkData/gitlab-artifacts
        target: /var/opt/gitlab/gitlab-rails/shared/artifacts
    shm_size: '256m'
  runner:
    image: gitlab/gitlab-runner:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    links:
      - omnibus:git.ghanima.net
    restart: always
    hostname: runner
    networks:
      - default
    environment:
      TZ: Australia/Melbourne
    volumes:
      - 'gitlab_runner_config:/etc/gitlab-runner'
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
  cloudflared_configure:
    restart: always
    networks:
      - default
    image: bash:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      TZ: Australia/Melbourne
      CF_TUNNEL_UUID: $CF_TUNNEL_UUID
      CF_PAGES_TUNNEL_UUID: $CF_PAGES_TUNNEL_UUID
      CF_PAGES_CREDENTIALS: $CF_PAGES_CREDENTIALS
      #CF_HOSTNAMES: "\"*.ghanima.net\""
      GL_HOSTNAMES: "git.ghanima.net"
      GL_PAGES_DOMAIN: "ghanima.net"
      GL_PAGES_DOMAIN_ROOT_SITE: "www.ghanima.net"
      CF_CREDENTIALS: $CF_CREDENTIALS
    entrypoint: 
      - "/usr/local/bin/bash"
      - "-ec"
      - |
        CONFMD5=""
        PAGESCONFMD5=""
        while true; do
          echo -e "tunnel: $${CF_TUNNEL_UUID}\ncredentials-file: /etc/cloudflared/tunnel-credentials.json\ningress:\n" > /etc/cloudflared/config.yaml
          readarray -t -d "," DOMAINS < <(echo "$${GL_HOSTNAMES}" | tr -d '\n')
          for DOMAIN in "$${DOMAINS[@]}"; do
            echo -e "  - hostname: $${DOMAIN}\n    service: https://$$(getent hosts omnibus | awk '{print $$1}'):443\n    originRequest:\n      noTLSVerify: true\n" >> /etc/cloudflared/config.yaml
          done
          echo -e "  - hostname: cr.ghanima.net\n    service: https://$$(getent hosts omnibus | awk '{print $$1}'):5678\n    originRequest:\n      noTLSVerify: true\n" >> /etc/cloudflared/config.yaml
          echo -e "  - hostname: $${GL_PAGES_DOMAIN}\n    service: http://$$(getent hosts omnibus | awk '{print $$1}'):8063\n    httpHostHeader: \"$${GL_PAGES_DOMAIN_ROOT_SITE}\"\n    originRequest:\n      httpHostHeader: \"$${GL_PAGES_DOMAIN_ROOT_SITE}\"" >> /etc/cloudflared/config.yaml
          echo -e "  - hostname: \"*.$${GL_PAGES_DOMAIN}\"\n    service: http://$$(getent hosts omnibus | awk '{print $$1}'):8063\n" >> /etc/cloudflared/config.yaml
          echo -e "  - service: http_status:404\n" >> /etc/cloudflared/config.yaml
          if [ "$${CF_CREDENTIALS}" != "" ]; then
            echo "$${CF_CREDENTIALS}" > /etc/cloudflared/tunnel-credentials.json
          fi
          ls -la /etc/cloudflared
          cat /etc/cloudflared/*
          
          NEWCONFMD5=$(cat /etc/cloudflared/* | md5sum | awk '{print $$1}')
          echo "CONFMD5 $${CONFMD5}, NEWCONFMD5 $${NEWCONFMD5}"
          if [ "$${NEWCONFMD5}" != "$${CONFMD5}" ]; then
            CFPID=$$(ps a | grep '[[:space:]]cloudflared[[:space:]].*tunnel run.*$$' | awk '{print $$1}')
            echo "Need to reload cloudflared (pid $${CFPID})"
            if [ "$${CFPID}" != "" ]; then
              kill -HUP $${CFPID}
              CONFMD5="$${NEWCONFMD5}"
            fi
          fi

          echo -e "tunnel: $${CF_PAGES_TUNNEL_UUID}\ncredentials-file: /etc/cloudflared/tunnel-credentials.json\ningress:\n" > /etc/cloudflared_pages/config.yaml
          echo -e "  - hostname: $${GL_PAGES_DOMAIN}\n    service: http://$$(getent hosts omnibus | awk '{print $$1}'):8063\n    httpHostHeader: \"$${GL_PAGES_DOMAIN_ROOT_SITE}\"\n    originRequest:\n      httpHostHeader: \"$${GL_PAGES_DOMAIN_ROOT_SITE}\"" >> /etc/cloudflared_pages/config.yaml
          echo -e "  - hostname: \"*.$${GL_PAGES_DOMAIN}\"\n    service: http://$$(getent hosts omnibus | awk '{print $$1}'):8063\n" >> /etc/cloudflared_pages/config.yaml
          echo -e "  - service: http_status:404\n" >> /etc/cloudflared_pages/config.yaml
          if [ "$${CF_PAGES_CREDENTIALS}" != "" ]; then
            echo "$${CF_PAGES_CREDENTIALS}" > /etc/cloudflared_pages/tunnel-credentials.json
          fi
          ls -la /etc/cloudflared_pages/
          cat /etc/cloudflared_pages/*
          NEWPAGESCONFMD5=$(cat /etc/cloudflared/* | md5sum | awk '{print $$1}')
          echo "PAGESCONFMD5 $${PAGESCONFMD5}, NEWPAGESCONFMD5 $${NEWPAGESCONFMD5}"
          if [ "$${NEWPAGESCONFMD5}" != "$${PAGESCONFMD5}" ]; then
            CFPID=$$(ps a | grep '[[:space:]]cloudflared[[:space:]].*tunnel run.*$$' | awk '{print $$1}')
            echo "Need to reload cloudflared (pid $${CFPID})"
            if [ "$${CFPID}" != "" ]; then
              kill -HUP $${CFPID}
              PAGESCONFMD5="$${NEWPAGESCONFMD5}"
            fi
          fi
          
          sleep 10
        done
    volumes:
      - 'gitlab_cloudflared_config:/etc/cloudflared'
      - 'gitlab_cloudflared_pages_config:/etc/cloudflared_pages'
  cloudflared:
    image: 'cloudflare/cloudflared:latest'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      TZ: Australia/Melbourne
      TUNNEL_LOGLEVEL: trace
    pid: service:cloudflared_configure
    restart: always
    networks:
      - default
    hostname: 'cloudflared'
    command: '--protocol http2 tunnel run'
    volumes:
      - 'gitlab_cloudflared_config:/etc/cloudflared'
  cloudflared_pages:
    image: 'cloudflare/cloudflared:latest'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    environment:
      TZ: Australia/Melbourne
      TUNNEL_LOGLEVEL: trace
    pid: service:cloudflared_configure
    restart: always
    hostname: 'cloudflared_pages'
    networks:
      - default
    command: '--protocol http2 tunnel run'
    volumes:
      - 'gitlab_cloudflared_pages_config:/etc/cloudflared'
    #depends_on:
    #  cloudflared_configure:
    #    condition: service_completed_successfully
  backupsrunner:
    image: gitlab/gitlab-runner:latest
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    entrypoint:
      - sh
      - -c
      - |
        export
        getent hosts git.ghanima.net
        rm /etc/gitlab-runner/config.toml
        gitlab-runner \
          register \
          --non-interactive \
          -c /etc/gitlab-runner/config.toml \
          --url "https://git.ghanima.net" \
          --token "$${RUNNER_REGISTRATION_TOKEN}" \
          --executor "docker" \
          --docker-image bash:latest \
          --docker-privileged \
          --docker-volumes /certs/client \
          --docker-volumes /cache \
          --docker-pull-policy "if-not-present" \
          --docker-allowed-pull-policies "never" \
          --docker-allowed-pull-policies "if-not-present" \
          --docker-allowed-pull-policies "always" \
          --docker-network-mode gitlab_default \
          --docker-volumes /mnt/BulkData/gitlab-backups:/var/backups/gitlab \
          --docker-volumes gitlab_backup_metadata:/etc/gitlab-backups \
          --docker-volumes /mnt/BulkData/apt-cache:/var/cache/apt \
          --docker-volumes /var/run/docker.sock:/var/run/docker.sock
        if [ $$? -eq 0 ]; then
          echo "Registration succeeded.  Starting the runner."
          exec /usr/bin/dumb-init /entrypoint run
        else
          echo "Registration failed.  Sleep for 1 minute and exit.  Docker will restart this container to retry."
          sleep 60
          exit 1
        fi
    privileged: true
    restart: always
    hostname: backupsrunner
    networks:
      - default
    environment:
      TZ: Australia/Melbourne
      RUNNER_REGISTRATION_TOKEN: $BACKUPSRUNNER_REGISTRATION_TOKEN
    links:
      - omnibus:git.ghanima.net
    volumes:
      - 'gitlab_backupsrunner_config:/etc/gitlab-runner'
      - type: tmpfs
        target: /tmp
      - type: bind
        source: /mnt/BulkData/gitlab-backups
        target: /var/backups/gitlab
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
      - 'gitlab_backup_metadata:/etc/gitlab-backups'
      - type: bind
        source: /mnt/BulkData/apt-cache
        target: /var/cache/apt
    depends_on:
      omnibus:
        condition: service_healthy
volumes:
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_backup_metadata:
  gitlab_runner_config:
  gitlab_backupsrunner_config:
  gitlab_cloudflared_config:
  gitlab_cloudflared_pages_config:

networks:
  default:
